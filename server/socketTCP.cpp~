#include "socketTCP.h"

SocketTCP::SocketTCP() : Sockets(), thread_( &SocketTCP::workServer, this){}

SocketTCP::SocketTCP(int domain, int type, int protocol, unsigned short int port) : Sockets(domain, type, protocol, port, "0"), thread_( &SocketTCP::workServer, this){}

void SocketTCP::start(){
	thread_.join();
}

int SocketTCP::listenSocket(){
	if (-1 == listen(getSockFD(), 10)){
		perror("I can\'t listen a socket!");
		exit(EXIT_FAILURE);
	}
	return 0;
}

int SocketTCP::acceptSocket(){
	connFD_ = accept(getSockFD(), NULL, NULL);
	if(-1 == connFD_){
		perror("I can\'t accept a socket!");
		exit(EXIT_FAILURE);
	}
	return 0;	
}

int SocketTCP::dataReceive(){
	char buffer[1024] = "";
	socklen_t fromlen = sizeof(*getSAddr()); 

	int bytesRec = recvfrom(connFD_, (void *) buffer, sizeof(buffer), 0, (struct sockaddr *) getSAddr(), &fromlen);
	if (bytesRec < 0){
		printf("I\'m here!");
		fprintf(stderr, "%s\n", strerror(errno));
		exit(EXIT_FAILURE);
	}
	cout << "bytesRec: " << bytesRec << endl;
	sleep(1);
	cout << "datagram: " << buffer << endl;
	
	return 0;
}

int SocketTCP::shutdownSocket(){
	if(-1 == shutdown(connFD_, SHUT_RDWR)){
		perror("I can\'t shutdown a socket!");
		close(connFD_);
		exit(EXIT_FAILURE);
	}
	close(connFD_);
	return 0;
}

SocketUDP::SocketUDP() : Sockets(), thread_( &SocketUDP::workServer, this){}
SocketUDP::SocketUDP(int domain, int type, int protocol, unsigned short int port) : Sockets(domain, type, protocol, port, "0"), thread_( &SocketUDP::workServer, this){}

void SocketUDP::start(){
	thread_.join();
}

int SocketUDP::dataReceive(){
	char buffer[1024] = "";
	socklen_t fromlen = sizeof(*getSAddr()); 

	int recsize = recvfrom(getSockFD(), (void *)buffer, sizeof(buffer), 0, (struct sockaddr *) getSAddr(), &fromlen);
    	if (recsize < 0) {
    		fprintf(stderr, "%s\n", strerror(errno));
      		exit(EXIT_FAILURE);
    	}
    	cout << "recsize: " << recsize << endl;
    	sleep(1);
    	cout << "datagram: " << buffer << endl;

	return 0;
}

void SocketUDP::workServer(){
	createSocket();
	bindSocket();
	cout << "UDP listen..." << endl;
	while(1){
		dataReceive();
	}
}

void SocketTCP::workServer(){
	createSocket();
	bindSocket();
	listenSocket();
	cout << "TCP listen..." << endl;
	while(1){
		acceptSocket();
		dataReceive();
		shutdownSocket();
	}
}
